#pragma once

#include "Composed.hpp"

class Base 
{
private:

    int first_field;

    /**
     * Item 5:
     * - because we have a reference member, the compiler will not
     * generate an assignment operator function;
    */
    Composed& second_field;

    /**
     * Item 6: 
     * - disallowing the creation of a public default copy constructor
     * and assignment operator (which won't be generated here nonetheless);
    */
    Base(const Base&);
    Base& operator=(Base&);


public:

    /**
     * Item 5: 
     * - an arg-constructor declaration is given, no implicit no-args
     * constructor declaration will be injected by the compiler;
     * - a destructor will still be generated by the compiler;
    */
    Base(Composed&);

    void do_first_action();
    int do_second_action(int);
    int* get_instance_counter();

};